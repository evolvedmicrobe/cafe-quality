//
//  ContextParameterProvider.cpp
//  ConsensusCoreXCode
//
//  Created by Nigel Delaney on 2/27/15.
//  Copyright (c) 2015 Pacific Biosciences. All rights reserved.
//

#include "ContextParameterProvider.hpp"
using namespace std;


namespace ConsensusCore {
    
    SNR::SNR(double a, double c, double g, double t) : A(a), C(c), G(g), T(t) {}
    
    
    
    // Autogenerated by unitem package
    // Copy/Paste into ContextParameterProvider.cpp to test settings.
    //Rows are Stick, Branch, Deletion (Match is the reference)
    //Columns are Intercept, SNR, SNR^2, SNR^3
    // Fit for context:  AA
    Matrix<double>  AA  = {
        { -4.10396742242294, 0.150082854808938, -0.00583215850978952, 6.43198028287102e-05  },
        { -2.13922734090803, -0.139830056090444, 0.00718782777239638, -0.000122297691117718  },
        { -0.417429349840048, -0.420001901667893, 0.0211258458277033, -0.000327414226609308  } };
    // Fit for context:  CC
    Matrix<double>  CC  = {
        { -4.39681779740336, 0.255438520132267, -0.0180789843694454, 0.000427339357643903  },
        { -0.757640426756962, -0.671912594656525, 0.0701879541513042, -0.00215470006877576  },
        { 1.99881283784201, -1.34660531362857, 0.12532474694714, -0.00381403836448139  } };
    // Fit for context:  GG
    Matrix<double>  GG  = {
        { -3.39606606951842, 0.0162825672863799, -0.00340180412937701, 0.000129902467049612  },
        { -1.8699084842385, -0.352476593850427, 0.0234239902111974, -0.000480150076667021  },
        { -0.098259810444694, -0.614523312649461, 0.0451841028905979, -0.00114142821745753  } };
    // Fit for context:  TT
    Matrix<double>  TT  = {
        { -4.08943674551899, 0.316914711618942, -0.0299192360311798, 0.000975317483372793  },
        { -1.69800358550707, -0.385870941601513, 0.0290746277185486, -0.000682347318005789  },
        { 0.590682208424961, -0.815728771823416, 0.058205092870853, -0.00142336465014945  } };
    // Fit for context:  NA
    Matrix<double>  NA  = {
        { -2.64210935575428, -0.0977207755590033, 0.00865641397710446, -0.000187276629711874  },
        { -3.29546218204411, 0.0555600540406027, -0.00473247389299869, 0.000120248832897104  },
        { -0.531438864484328, -0.354907151029909, 0.0121847128170413, -0.000106548367639999  } };
    // Fit for context:  NC
    Matrix<double>  NC  = {
        { -4.2003902999368, 0.138391199419944, 0.00135050203702897, -0.000450372982098497  },
        { -2.3149386064632, -0.175995540451623, 0.0131681755578489, -0.000158830835515447  },
        { -2.42100576098289, -0.0959629509895948, -0.00752551534854517, 0.000570775179148007  } };
    // Fit for context:  NG
    Matrix<double>  NG  = {
        { -3.20247282153609, -0.0350431673838127, 0.00385986030236558, -8.46112973075259e-05  },
        { -2.63699101074922, -0.125135076949944, 0.00770325400188476, -0.000158728327690426  },
        { -1.56733935860659, -0.184012382920683, 0.00015264281304894, 0.000202852384100238  } };
    // Fit for context:  NT
    Matrix<double>  NT  = {
        { -3.89954559583152, 0.228465068253333, -0.023451099654793, 0.000766587058690092  },
        { -2.81452626660996, -0.0283288379932702, -0.00337462154090633, 0.00028978893906315  },
        { -1.57344580068249, -0.243967914260989, 0.0121417206605057, -0.000318402993263868  } };

    
    static std::unordered_map<std::string, Matrix<double>* > parameter_store = { {"AA", &AA},{"CC", &CC},{"GG", &GG},{"NA", &NA},{"NC", &NC},{"NG", &NG},{"NT", &NT},{"TT", &TT}};
    
    TransitionParameters
    ContextParameterProvider::GetTransitionParameters(const string& context, const SNR& snrs)
    {
        auto params = *parameter_store[context];
        //Get the snr for the relevant channel
        auto channel  = context.at(1);
        double snr;
        switch(channel) {
                case 'A':
                    snr = snrs.A;
                    break;
                case 'C':
                    snr = snrs.C;
                    break;
                case 'G':
                    snr = snrs.G;
                    break;
                case 'T':
                    snr = snrs.T;
                    break;
            default:
                throw;
        }
        double snr2 = snr * snr;
        double snr3 = snr2 * snr;
        
        double predicts[3]; // Represents the XB portion
        double sum = 1.0;
        // Calculate each values contribution
        for(int i=0; i< 3; i ++) {
            auto xb = params[i][0] + snr * params[i][1] + snr2 * params[i][2] + snr3 * params[i][3];
            xb = exp(xb);
            predicts[i] = xb;
            sum += xb;
        }
        // Move to log space
        //sum = log(sum);
        
        double match = 1.0 / sum; // match probability is the reference, or 1 / sum
        //double branch = 1.0 / sum; // match probability is the reference, or 1 / sum
        
        // Now get the probabilities
        for(int i=0; i< 3; i++) {
            predicts[i] = predicts[i] / sum;
        }
        TransitionParameters tp(match, predicts[1], predicts[0], predicts[2]);
        //TransitionParameters tp(predicts[1], predicts[2], branch, predicts[0]);
        return tp;
    }
    
}
