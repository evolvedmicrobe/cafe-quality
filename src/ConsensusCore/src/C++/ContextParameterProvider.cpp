//
//  ContextParameterProvider.cpp
//  ConsensusCoreXCode
//
//  Created by Nigel Delaney on 2/27/15.
//  Copyright (c) 2015 Pacific Biosciences. All rights reserved.
//

#include "ContextParameterProvider.hpp"
using namespace std;
namespace ConsensusCore {
    
    SNR::SNR(double a, double c, double g, double t) : A(a), C(c), G(g), T(t) {}
    
    
    /* Autogenerated by OutputDiNucleotideContexts.py
     * Rows are Dark, Match, Stick (Branch is the reference)
     * Columns are Intercept, SNR, SNR^2, SNR^3 */
    static double AA[3][4] = {
        {5.04964676394959,-0.693207030363152,0.0422140829479668,-0.000968959310672217},
        {2.6044054979329,0.288475262243944,-0.0208805589126506,0.000380899394040856},
        {-4.32707864788065,1.07090008760872,-0.0777874445746693,0.00165150952598117}
    };
    static double CC[3][4] = {
        {-0.598503056064132,1.34085228327744,-0.190169731559989,0.00774105643063622},
        {-3.70682412752257,2.84296162440303,-0.336769186589466,0.0126296794802954},
        {-2.5541392627189,1.27425006416191,-0.136453751859676,0.00446245026660434}
    };
    static double GG[3][4] = {
        {8.55651592988201,-1.73677813426316,0.165522479742324,-0.00505567203660016},
        {7.98341706154684,-0.996487286249378,0.100764178355062,-0.00304942727101111},
        {6.12573768546531,-1.47319809845774,0.125843118877494,-0.00326392185432165}
    };
    static double NA[3][4] = {
        {3.2726533655894,-0.677048752857434,0.0332263840590967,-0.000588940468995371},
        {4.44831402865459,-0.300075397767843,0.0173148239912529,-0.00036036250267047},
        {1.42853725713317,-0.478807108935147,0.0304713659564427,-0.000726022535211502}
    };
    static double NC[3][4] = {
        {8.85408837859121,-2.6675476867273,0.282149229378593,-0.0105307223030586},
        {5.26262025282714,-0.421555913970423,0.039752186030211,-0.00153954541662836},
        {3.87938539719929,-1.25991641094725,0.153912353568176,-0.00638293641710526}
    };
    static double NG[3][4] = {
        {2.70445276759242,-0.461121568817997,0.0242947497350321,-0.000807386901047337},
        {2.05141386484399,0.566413017348359,-0.0611098237066853,0.00197398517823925},
        {-0.100191695615714,0.237037192813532,-0.0473509359234524,0.00200129606226079}
    };
    static double NT[3][4] = {
        {5.48452786158499,-1.43216422068688,0.141793744529958,-0.00523578435313232},
        {2.66786359304947,0.343900344652326,-0.0279827653398935,0.000597072960449538},
        {-2.00811875376941,0.765290211557824,-0.0866212872945003,0.00281320352415615}
    };
    static double TT[3][4] = {
        {4.06915664612978,-0.864672772417635,0.0667707473070519,-0.00200841228495751},
        {3.6267044972586,-0.241588557787496,0.0279676014551275,-0.00108971180046666},
        {-0.756939870354859,0.110219716337897,-0.0308126947092823,0.00137156472457417}
    };
    
    //TODO: This is the most hideous thing I have ever written, figure out how
    // to initialize a dictionary to do this.
    double* GetParameters(char first, char second) {
        double* toR;
        if (first=='N') {
            switch(second) {
                case 'A':
                    toR = (double*)&NA;
                    break;
                case 'C':
                    toR = (double*)&NC;
                    break;
                case 'G':
                    toR = (double*)&NG;
                    break;
                case 'T':
                    toR = (double*)&NT;
                    break;
            }
        }
        else {
            switch(second) {
                case 'A':
                    toR = (double*)&AA;
                    break;
                case 'C':
                    toR = (double*)&CC;
                    break;
                case 'G':
                    toR = (double*)&GG;
                    break;
                case 'T':
                    toR = (double*)&TT;
                    break;
            }
        }
        return toR;
    }
    
    //unordered_map<std::string, double*> ContextParameterProvider::parameter_store = { {"AA", &AA},{"CC", &CC},{"GG", &GG},{"NA", &NA},{"NC", &NC},{"NG", &NG},{"NT", &NT},{"TT", TT}};
    
    std::shared_ptr<TransitionParameters>
    ContextParameterProvider::GetTransitionParameters(const string& context, const SNR& snrs)
    {
        auto params = (double (*)[4]) GetParameters(context.at(0), context.at(1));
        //Get the snr for the relevant channel
        auto channel  = context.at(1);
        double snr;
        switch(channel) {
                case 'A':
                    snr = snrs.A;
                    break;
                case 'C':
                    snr = snrs.C;
                    break;
                case 'G':
                    snr = snrs.G;
                    break;
                case 'T':
                    snr = snrs.T;
                    break;
        }
        double snr2 = snr * snr;
        double snr3 = snr2 * snr;
        
        double predicts[3]; // Represents the XB portion
        double sum = 1.0;
        // Calculate each values contribution
        for(int i=0; i< 3; i ++) {
            auto xb = params[i][0] + snr * params[i][1] + snr2 * params[i][2] + snr3 * params[i][3];
            xb = exp(xb);
            predicts[i] = xb;
            sum += xb;
        }
        // Move to log space
        sum = log(sum);
        
        double branch = -sum; // Branch probability is the reference, or 1 / sum
        
        // Now get the probabilities
        for(int i=0; i< 3; i++) {
            predicts[i] = log(predicts[i]) - sum;
        }
        
        return std::shared_ptr<TransitionParameters> (new TransitionParameters(predicts[1], predicts[2], branch, predicts[0]));
    }
    
}
