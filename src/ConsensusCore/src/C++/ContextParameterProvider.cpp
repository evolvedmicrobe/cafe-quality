//
//  ContextParameterProvider.cpp
//  ConsensusCoreXCode
//
//  Created by Nigel Delaney on 2/27/15.
//  Copyright (c) 2015 Pacific Biosciences. All rights reserved.
//

#include "ContextParameterProvider.hpp"
using namespace std;


namespace ConsensusCore {
    
    SNR::SNR(double a, double c, double g, double t) : A(a), C(c), G(g), T(t) {}
    
    
    // Autogenerated by unitem package
    // Copy/Paste into ContextParameterProvider.cpp to test settings.
    //Rows are Stick, Branch, Deletion (Match is the reference)
    //Columns are Intercept, SNR, SNR^2, SNR^3
    // Fit for context:  AA
    Matrix<double>  AA  = {
        { -3.49798432832438, 0.0560120492237216, 0.00189350582670539, -0.000106417106091199  },
        { -3.42895664755643, 0.131402900263868, -0.00884591482636043, 0.000156264739206075  },
        { -0.430080961880203, -0.430036148275958, 0.0255624654364134, -0.000484731806849655  } };
    // Fit for context:  CC
    Matrix<double>  CC  = {
        { -4.29414200084919, 0.258196773195621, -0.0177917099042912, 0.000465488681558937  },
        { -1.49352236541543, -0.421595522043337, 0.0469303438825683, -0.00147608269703426  },
        { 1.39339147115745, -1.07037299196733, 0.092442405456341, -0.00254651818927181  } };
    // Fit for context:  GG
    Matrix<double>  GG  = {
        { -3.82662614721565, 0.111799282216585, -0.00982299454453158, 0.000309163769313552  },
        { -2.12099152274992, -0.25745159957989, 0.0149514227849545, -0.000260018390380765  },
        { -0.0373819088604712, -0.616569286110109, 0.0427928376239552, -0.000972402171035959  } };
    // Fit for context:  TT
    Matrix<double>  TT  = {
        { -3.63634533605051, 0.202086748399855, -0.0147589880827807, 0.000451890901784013  },
        { -2.41155869432553, -0.0401758590318656, -0.00952343517424616, 0.00055774044217711  },
        { 0.695904755013323, -0.847331391819716, 0.0618654667890791, -0.00154107101951861  } };
    // Fit for context:  NA
    Matrix<double>  NA  = {
        { -2.91021320273565, -0.0337988801752464, 0.00583796786519076, -0.000151942156796391  },
        { -3.11428028354104, -0.00184194261825532, 3.06277917568484e-06, -1.77032658162645e-05  },
        { -0.254764500173236, -0.414829809608977, 0.0171208268538734, -0.000239130107476294  } };
    // Fit for context:  NC
    Matrix<double>  NC  = {
        { -4.40031949311498, 0.332392228758557, -0.0246033355489981, 0.00063023147891612  },
        { -2.02181927880718, -0.341040374369166, 0.039461016595983, -0.00136167283629461  },
        { -2.14267462516827, -0.178804400965781, 0.00027482762321685, 0.000352934318053704  } };
    // Fit for context:  NG
    Matrix<double>  NG  = {
        { -3.16615287570831, -0.0318766293326903, 0.00159531801382894, 4.00212615222052e-06  },
        { -2.51031338216763, -0.136566727320549, 0.0053726590074046, -3.89082538031005e-05  },
        { -1.53916826641199, -0.20145003444691, 0.00220372611341688, 0.000132234923061341  } };
    // Fit for context:  NT
    Matrix<double>  NT  = {
        { -3.65555403809041, 0.106759352629482, -0.0155224220192524, 0.000682080649614225  },
        { -3.12669151570951, 0.128440737443396, -0.0256587717105066, 0.00109173369807123  },
        { -1.59307727766839, -0.191477372164151, 0.00714991842737419, -0.000218689653421751  } };
    
    static std::unordered_map<std::string, Matrix<double>* > parameter_store = { {"AA", &AA},{"CC", &CC},{"GG", &GG},{"NA", &NA},{"NC", &NC},{"NG", &NG},{"NT", &NT},{"TT", &TT}};
    
    TransitionParameters
    ContextParameterProvider::GetTransitionParameters(const string& context, const SNR& snrs)
    {
        auto params = *parameter_store[context];
        //Get the snr for the relevant channel
        auto channel  = context.at(1);
        double snr;
        switch(channel) {
                case 'A':
                    snr = snrs.A;
                    break;
                case 'C':
                    snr = snrs.C;
                    break;
                case 'G':
                    snr = snrs.G;
                    break;
                case 'T':
                    snr = snrs.T;
                    break;
            default:
                throw;
        }
        double snr2 = snr * snr;
        double snr3 = snr2 * snr;
        
        double predicts[3]; // Represents the XB portion
        double sum = 1.0;
        // Calculate each values contribution
        for(int i=0; i< 3; i ++) {
            auto xb = params[i][0] + snr * params[i][1] + snr2 * params[i][2] + snr3 * params[i][3];
            xb = exp(xb);
            predicts[i] = xb;
            sum += xb;
        }
        // Move to log space
        //sum = log(sum);
        
        double match = 1.0 / sum; // match probability is the reference, or 1 / sum
        //double branch = 1.0 / sum; // match probability is the reference, or 1 / sum
        
        // Now get the probabilities
        for(int i=0; i< 3; i++) {
            predicts[i] = predicts[i] / sum;
        }
        TransitionParameters tp(match, predicts[1], predicts[0], predicts[2]);
        //TransitionParameters tp(predicts[1], predicts[2], branch, predicts[0]);
        return tp;
    }
    
}
