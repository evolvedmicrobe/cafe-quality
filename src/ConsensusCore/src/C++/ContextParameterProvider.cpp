//
//  ContextParameterProvider.cpp
//  ConsensusCoreXCode
//
//  Created by Nigel Delaney on 2/27/15.
//  Copyright (c) 2015 Pacific Biosciences. All rights reserved.
//

#include "ContextParameterProvider.hpp"
using namespace std;


namespace ConsensusCore {
    
    SNR::SNR(double a, double c, double g, double t) : A(a), C(c), G(g), T(t) {}
    
    
    
    // Autogenerated by unitem package
    // Copy/Paste into ContextParameterProvider.cpp to test settings.
    //Rows are Stick, Branch, Deletion (Match is the reference)
    //Columns are Intercept, SNR, SNR^2, SNR^3
    // Fit for context:  AA
    Matrix<double>  AA  = {
        { -3.80918542801942, 0.101910455969825, -0.00358155428080894, 4.30633920948924e-05  },
        { -2.14188007520167, -0.143827478233173, 0.00753322056264203, -0.000124670890046475  },
        { -0.447507845998784, -0.419822191138875, 0.0216578053677134, -0.000350930026108839  } };
    // Fit for context:  CC
    Matrix<double>  CC  = {
        { -4.54171243791404, 0.298315188647865, -0.0223346621824796, 0.000612736841178362  },
        { -0.680060335525877, -0.71995326667744, 0.0779164845086197, -0.00245039535439559  },
        { 1.83506924536126, -1.27398204101353, 0.115457098112086, -0.0034258236691311  } };
    // Fit for context:  GG
    Matrix<double>  GG  = {
        { -2.84387630354829, -0.162465230434457, 0.0123785567260995, -0.000278648225018046  },
        { -1.98802819900183, -0.314058575589093, 0.0202763351758516, -0.000411184289847054  },
        { -0.143235843223729, -0.59377230245758, 0.0429515912684583, -0.00109429623600883  } };
    // Fit for context:  TT
    Matrix<double>  TT  = {
        { -3.91343488570899, 0.253214725323076, -0.0235944453466992, 0.000778673817915696  },
        { -1.67158833655297, -0.375346238538777, 0.0258749091981494, -0.000517706719682133  },
        { 0.60480043499574, -0.823032785923693, 0.0593487309932425, -0.00147545047798371  } };
    // Fit for context:  NA
    Matrix<double>  NA  = {
        { -2.76125686829092, -0.0701884284600311, 0.00680682055669279, -0.000150590914385511  },
        { -3.41576339908388, 0.0860149944189671, -0.00719449118939703, 0.000174797319497352  },
        { -0.460538419246327, -0.371236733109756, 0.0134255919022177, -0.000134146835067764  } };
    // Fit for context:  NC
    Matrix<double>  NC  = {
        { -4.52807319257285, 0.283059501947857, -0.0165820230354313, 0.000205598318226758  },
        { -2.21017284482096, -0.222958137202729, 0.0191082561442375, -0.000375771691247116  },
        { -2.37525302377992, -0.125027756632188, -0.0033090013385739, 0.000403010784933619  } };
    // Fit for context:  NG
    Matrix<double>  NG  = {
        { -3.21294626713595, -0.0183911501684569, 0.00197303338323778, -3.6982734603638e-05  },
        { -2.56657811461118, -0.137932438160753, 0.00802842336728134, -0.000147595236981542  },
        { -1.46461987717425, -0.224557041618669, 0.00467788379134204, 5.36477274197179e-05  } };
    // Fit for context:  NT
    Matrix<double>  NT  = {
        { -4.03066575675339, 0.27398803523627, -0.0284713530245396, 0.000938794157301507  },
        { -2.81194035088495, -0.0309783043661063, -0.00351833198912036, 0.000306740839682349  },
        { -1.61772947198505, -0.233184270542854, 0.0110186344452492, -0.000271218834421574  } };

    
    static std::unordered_map<std::string, Matrix<double>* > parameter_store = { {"AA", &AA},{"CC", &CC},{"GG", &GG},{"NA", &NA},{"NC", &NC},{"NG", &NG},{"NT", &NT},{"TT", &TT}};
    
    TransitionParameters
    ContextParameterProvider::GetTransitionParameters(const string& context, const SNR& snrs)
    {
        auto params = *parameter_store[context];
        //Get the snr for the relevant channel
        auto channel  = context.at(1);
        double snr;
        switch(channel) {
                case 'A':
                    snr = snrs.A;
                    break;
                case 'C':
                    snr = snrs.C;
                    break;
                case 'G':
                    snr = snrs.G;
                    break;
                case 'T':
                    snr = snrs.T;
                    break;
            default:
                throw;
        }
        double snr2 = snr * snr;
        double snr3 = snr2 * snr;
        
        double predicts[3]; // Represents the XB portion
        double sum = 1.0;
        // Calculate each values contribution
        for(int i=0; i< 3; i ++) {
            auto xb = params[i][0] + snr * params[i][1] + snr2 * params[i][2] + snr3 * params[i][3];
            xb = exp(xb);
            predicts[i] = xb;
            sum += xb;
        }
        // Move to log space
        //sum = log(sum);
        
        double match = 1.0 / sum; // match probability is the reference, or 1 / sum
        //double branch = 1.0 / sum; // match probability is the reference, or 1 / sum
        
        // Now get the probabilities
        for(int i=0; i< 3; i++) {
            predicts[i] = predicts[i] / sum;
        }
        TransitionParameters tp(match, predicts[1], predicts[0], predicts[2]);
        //TransitionParameters tp(predicts[1], predicts[2], branch, predicts[0]);
        return tp;
    }
    
}
