
namespace PacBio.ConsensusTools

open System.IO

open PacBio.Consensus
open PacBio.IO
open PacBio.IO.Fasta
open PacBio.FSharp.Utils
open PacBio.FSharp.Utils.ActivePatterns
open PacBio.FSharp.Utils.Logging
open PacBio.FSharp.Utils.SubCommands
open PacBio.Utils

type ChimeraFinder() as this =
    inherit SubCommand ("ChimeraFinder", "Run the ChimeraDetector on a collection of sequences generated by AmpliconAnalysis", hidden=true)

    let chimeraScoreThreshold = ref 1.0f

    do
        this.optA "t|threshold" chimeraScoreThreshold "Minimum Chimera score to declare a sequence chimeric.  Default = 1.0."
        this.AllowsAnyAdditionalArguments () |> ignore

    override this.Run(args) =
        
        let sequenceFiles =
            match ("", args) with
            | Unnamed(paths) -> paths
            | NonExistent(paths) ->
                invalidOptf "Input file(s) '%s' do(es) not exist -- please specify FASTA files on the command line." (String.concat "', '" paths)
            | _ ->
                invalidOpt "Input files unspecified -- please specify FASTA files on the command line."

        sequenceFiles |> Array.iter (fun f -> this.logf Info "Sequence File: %s" f)
        
        let sequencesFromFile filePath =
            let fastaExts = [|".fasta"; ".fsta"; ".fa"; ".fas"|]
            let fastqExts = [|".fastq"; ".fstq"; ".fq"; ".faq"|]
            let fileExt = Path.GetExtension filePath
            let isExt = fun e -> e = fileExt
            
            if Array.exists isExt fastaExts then
                 use reader = new Fasta.SimpleFASTAReader (filePath)
                 seq { for record in reader do yield record }
            elif Array.exists isExt fastqExts then
                 this.log Error "ChimeraFinder from FASTQ not implemented - bug bbowman@pacificbiosciences.com."
                 new System.NotImplementedException () |> raise
                 Seq.empty<FASTAEntry>
            else
                 this.logf Error "Unrecognized file extension '%s' from file '%s'" fileExt filePath
                 new System.NotSupportedException () |> raise
                 Seq.empty<FASTAEntry>

        let records = seq { 
            for fileName in sequenceFiles do
                for record in sequencesFromFile fileName do
                    yield record } |> Seq.toArray

        records |> Seq.iter (fun r -> this.logf Info "Sequence Record: %s" r.Header)

        let coverageOf (record : FASTAEntry) =
           let numReadsLoc = record.Header.IndexOf "NumReads"
           let numReadsString = record.Header.Substring (numReadsLoc + 8)
           System.Int32.Parse numReadsString

        let chimeraInput = records |> Seq.map (fun r -> (coverageOf r, r.Header, r.GetSequence()))
           
        let chimeraResults = ChimeraDetector.findChimeras chimeraInput !chimeraScoreThreshold |> snd

        //let reads =
        //    match !sequenceFile with
        //    | NonEmpty(wlPath) ->
        //        let fastaExts = [|".fasta"; ".fsta"; ".fa"; ".fas"|]
        //        let fastqExts = [|".fastq"; ".fstq"; ".fq"; ".faq"|]
        //        let wlExt = Path.GetExtension wlPath
        //        let isExt = fun e -> e = wlExt
        //        let readIds =
        //            if Array.exists isExt fastaExts then
        //                use reader = new Fasta.SimpleFASTAReader (wlPath)
        //                [| for e in reader -> normalizeReadId e.Header |]
        //            elif Array.exists isExt fastqExts then
        //                log Error "Whitelist from FASTQ not implemented - bug lhepler@pacificbiosciences.com."
        //                new System.NotImplementedException () |> raise
        //                [||]
        //            else
        //                [| for e in File.ReadLines wlPath -> normalizeReadId e |]
        //        seq { for readId in Set readIds do
        //                for read in basCollection.GetSubreadsForZmw readId do yield read }

        //if !doChimeraFilter then
        //    let chimeraInput = results |> Seq.map (fun r -> (r.Coverage, r.FastaName, r.Sequence))
        //    let chimeraResults = ChimeraDetector.findChimeras chimeraInput !chimeraScoreThreshold |> snd
        //    let resDict = dict [ for r in results do yield (r.FastaName, r) ]
        //    for chimera in chimeraResults do
        //        resDict.[chimera.name].ChimeraResult <- chimera
        //    resDict.Values |> Seq.sortBy (fun r -> -r.Coverage) |> Seq.toArray
        // End of doAmpliconAnalysis enclosure

        int ProcessExitCode.Success
